// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace WebApplication3.CompiledModels
{
    public partial class PetContextModel
    {
        partial void Initialize()
        {
            var pet = PetEntityType.Create(this);
            var user = UserEntityType.Create(this);

            PetEntityType.CreateAnnotations(pet);
            UserEntityType.CreateAnnotations(user);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.6");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var pet = FindEntityType("WebApplication3.Models.Pet")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            pet.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var webApplication3ModelsPetTableBase = new TableBase("WebApplication3.Models.Pet", null, relationalModel);
            var addedDateColumnBase = new ColumnBase<ColumnMappingBase>("AddedDate", "timestamp with time zone", webApplication3ModelsPetTableBase);
            webApplication3ModelsPetTableBase.Columns.Add("AddedDate", addedDateColumnBase);
            var ageColumnBase = new ColumnBase<ColumnMappingBase>("Age", "integer", webApplication3ModelsPetTableBase);
            webApplication3ModelsPetTableBase.Columns.Add("Age", ageColumnBase);
            var breedColumnBase = new ColumnBase<ColumnMappingBase>("Breed", "text", webApplication3ModelsPetTableBase);
            webApplication3ModelsPetTableBase.Columns.Add("Breed", breedColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "text", webApplication3ModelsPetTableBase);
            webApplication3ModelsPetTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", webApplication3ModelsPetTableBase);
            webApplication3ModelsPetTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "text", webApplication3ModelsPetTableBase);
            webApplication3ModelsPetTableBase.Columns.Add("Name", nameColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "text", webApplication3ModelsPetTableBase);
            webApplication3ModelsPetTableBase.Columns.Add("Type", typeColumnBase);
            relationalModel.DefaultTables.Add("WebApplication3.Models.Pet", webApplication3ModelsPetTableBase);
            var webApplication3ModelsPetMappingBase = new TableMappingBase<ColumnMappingBase>(pet, webApplication3ModelsPetTableBase, true);
            webApplication3ModelsPetTableBase.AddTypeMapping(webApplication3ModelsPetMappingBase, false);
            defaultTableMappings.Add(webApplication3ModelsPetMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, pet.FindProperty("Id")!, webApplication3ModelsPetMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)addedDateColumnBase, pet.FindProperty("AddedDate")!, webApplication3ModelsPetMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ageColumnBase, pet.FindProperty("Age")!, webApplication3ModelsPetMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)breedColumnBase, pet.FindProperty("Breed")!, webApplication3ModelsPetMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, pet.FindProperty("Description")!, webApplication3ModelsPetMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, pet.FindProperty("Name")!, webApplication3ModelsPetMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, pet.FindProperty("Type")!, webApplication3ModelsPetMappingBase);

            var tableMappings = new List<TableMapping>();
            pet.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var petsTable = new Table("Pets", null, relationalModel);
            var idColumn = new Column("Id", "integer", petsTable);
            petsTable.Columns.Add("Id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var addedDateColumn = new Column("AddedDate", "timestamp with time zone", petsTable);
            petsTable.Columns.Add("AddedDate", addedDateColumn);
            var ageColumn = new Column("Age", "integer", petsTable);
            petsTable.Columns.Add("Age", ageColumn);
            var breedColumn = new Column("Breed", "text", petsTable);
            petsTable.Columns.Add("Breed", breedColumn);
            var descriptionColumn = new Column("Description", "text", petsTable);
            petsTable.Columns.Add("Description", descriptionColumn);
            var nameColumn = new Column("Name", "text", petsTable);
            petsTable.Columns.Add("Name", nameColumn);
            var typeColumn = new Column("Type", "text", petsTable);
            petsTable.Columns.Add("Type", typeColumn);
            var pK_Pets = new UniqueConstraint("PK_Pets", petsTable, new[] { idColumn });
            petsTable.PrimaryKey = pK_Pets;
            var pK_PetsUc = RelationalModel.GetKey(this,
                "WebApplication3.Models.Pet",
                new[] { "Id" });
            pK_Pets.MappedKeys.Add(pK_PetsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PetsUc).Add(pK_Pets);
            petsTable.UniqueConstraints.Add("PK_Pets", pK_Pets);
            relationalModel.Tables.Add(("Pets", null), petsTable);
            var petsTableMapping = new TableMapping(pet, petsTable, true);
            petsTable.AddTypeMapping(petsTableMapping, false);
            tableMappings.Add(petsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, pet.FindProperty("Id")!, petsTableMapping);
            RelationalModel.CreateColumnMapping(addedDateColumn, pet.FindProperty("AddedDate")!, petsTableMapping);
            RelationalModel.CreateColumnMapping(ageColumn, pet.FindProperty("Age")!, petsTableMapping);
            RelationalModel.CreateColumnMapping(breedColumn, pet.FindProperty("Breed")!, petsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, pet.FindProperty("Description")!, petsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, pet.FindProperty("Name")!, petsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, pet.FindProperty("Type")!, petsTableMapping);

            var user = FindEntityType("WebApplication3.Models.User")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var webApplication3ModelsUserTableBase = new TableBase("WebApplication3.Models.User", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "integer", webApplication3ModelsUserTableBase);
            webApplication3ModelsUserTableBase.Columns.Add("Id", idColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "text", webApplication3ModelsUserTableBase);
            webApplication3ModelsUserTableBase.Columns.Add("Name", nameColumnBase0);
            var passwordColumnBase = new ColumnBase<ColumnMappingBase>("Password", "text", webApplication3ModelsUserTableBase);
            webApplication3ModelsUserTableBase.Columns.Add("Password", passwordColumnBase);
            relationalModel.DefaultTables.Add("WebApplication3.Models.User", webApplication3ModelsUserTableBase);
            var webApplication3ModelsUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, webApplication3ModelsUserTableBase, true);
            webApplication3ModelsUserTableBase.AddTypeMapping(webApplication3ModelsUserMappingBase, false);
            defaultTableMappings0.Add(webApplication3ModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, user.FindProperty("Id")!, webApplication3ModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, user.FindProperty("Name")!, webApplication3ModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase, user.FindProperty("Password")!, webApplication3ModelsUserMappingBase);

            var tableMappings0 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var userTable = new Table("User", null, relationalModel);
            var idColumn0 = new Column("Id", "integer", userTable);
            userTable.Columns.Add("Id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var nameColumn0 = new Column("Name", "text", userTable);
            userTable.Columns.Add("Name", nameColumn0);
            var passwordColumn = new Column("Password", "text", userTable);
            userTable.Columns.Add("Password", passwordColumn);
            var pK_User = new UniqueConstraint("PK_User", userTable, new[] { idColumn0 });
            userTable.PrimaryKey = pK_User;
            var pK_UserUc = RelationalModel.GetKey(this,
                "WebApplication3.Models.User",
                new[] { "Id" });
            pK_User.MappedKeys.Add(pK_UserUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserUc).Add(pK_User);
            userTable.UniqueConstraints.Add("PK_User", pK_User);
            relationalModel.Tables.Add(("User", null), userTable);
            var userTableMapping = new TableMapping(user, userTable, true);
            userTable.AddTypeMapping(userTableMapping, false);
            tableMappings0.Add(userTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, user.FindProperty("Id")!, userTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, user.FindProperty("Name")!, userTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn, user.FindProperty("Password")!, userTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
